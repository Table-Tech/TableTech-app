generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                String             @id @default(uuid())
  name              String
  address           String?
  phone             String?
  email             String?            @unique
  logoUrl           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  currency          String             @default("EUR")
  isActive          Boolean            @default(true)
  taxRate           Decimal            @default(9.0) @db.Decimal(5, 2)
  timezone          String             @default("Europe/Amsterdam")
  menuCategories    MenuCategory[]
  menuItems         MenuItem[]
  modifierTemplates ModifierTemplate[]
  orders            Order[]
  staff             Staff[]
  tables            Table[]

  @@index([email])
  @@index([isActive])
  @@index([createdAt])
}

model Table {
  id               String            @id @default(uuid())
  number           Int
  code             String            @unique
  capacity         Int?
  status           TableStatus       @default(AVAILABLE)
  qrCodeUrl        String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  restaurantId     String
  customerSessions CustomerSession[]
  orders           Order[]
  restaurant       Restaurant        @relation(fields: [restaurantId], references: [id])
  assistance       TableAssistance[]

  @@index([restaurantId])
  @@index([status])
  @@index([restaurantId, status])
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  imageUrl     String?
  description  String?
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  menuItems    MenuItem[]

  @@index([restaurantId])
  @@index([isActive])
  @@index([displayOrder])
  @@index([restaurantId, isActive, displayOrder])
}

model MenuItem {
  id                String                  @id @default(uuid())
  name              String
  description       String?
  price             Decimal                 @db.Decimal(10, 2)
  imageUrl          String?
  isAvailable       Boolean                 @default(true)
  preparationTime   Int?
  displayOrder      Int                     @default(0)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  categoryId        String
  restaurantId      String
  availabilityNote  String?
  lastUnavailableAt DateTime?
  stockCount        Int?
  unavailableBy     String?
  category          MenuCategory            @relation(fields: [categoryId], references: [id])
  restaurant        Restaurant              @relation(fields: [restaurantId], references: [id])
  modifierTemplates MenuItemModifierGroup[]
  orderItems        OrderItem[]

  @@index([restaurantId])
  @@index([categoryId])
  @@index([isAvailable])
  @@index([restaurantId, isAvailable])
}

model ModifierTemplate {
  id           String                  @id @default(uuid())
  restaurantId String
  name         String
  description  String?
  type         String                  @default("SINGLE_CHOICE")
  isActive     Boolean                 @default(true)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  menuItems    MenuItemModifierGroup[]
  options      ModifierOption[]
  restaurant   Restaurant              @relation(fields: [restaurantId], references: [id])

  @@unique([restaurantId, name])
  @@index([restaurantId])
  @@index([isActive])
}

model ModifierOption {
  id            String                   @id @default(uuid())
  templateId    String
  name          String
  price         Decimal                  @default(0) @db.Decimal(10, 2)
  displayOrder  Int                      @default(0)
  isActive      Boolean                  @default(true)
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  itemOverrides MenuItemModifierOption[]
  orderItems    OrderItemModifier[]
  template      ModifierTemplate         @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([templateId, displayOrder])
  @@index([isActive])
}

model MenuItemModifierGroup {
  id              String                   @id @default(uuid())
  menuItemId      String
  templateId      String
  displayName     String?
  required        Boolean                  @default(false)
  minSelect       Int                      @default(0)
  maxSelect       Int?
  displayOrder    Int                      @default(0)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  menuItem        MenuItem                 @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  template        ModifierTemplate         @relation(fields: [templateId], references: [id], onDelete: Cascade)
  optionOverrides MenuItemModifierOption[]

  @@unique([menuItemId, templateId])
  @@index([menuItemId])
  @@index([templateId])
  @@index([menuItemId, displayOrder])
}

model MenuItemModifierOption {
  id            String                @id @default(uuid())
  groupId       String
  optionId      String
  isHidden      Boolean               @default(false)
  priceOverride Decimal?              @db.Decimal(10, 2)
  nameOverride  String?
  isDefault     Boolean               @default(false)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  group         MenuItemModifierGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  option        ModifierOption        @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([groupId, optionId])
  @@index([groupId])
  @@index([optionId])
  @@index([isHidden])
}

model Order {
  id              String           @id @default(uuid())
  orderNumber     String           @unique
  status          OrderStatus      @default(PENDING)
  totalAmount     Decimal          @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  paymentStatus   PaymentStatus    @default(PENDING)
  molliePaymentId String?
  webhookReceived Boolean          @default(false)
  tableId         String
  restaurantId    String
  completedAt     DateTime?
  confirmedAt     DateTime?
  confirmedBy     String?
  deliveredAt     DateTime?
  readyAt         DateTime?
  serviceFee      Decimal?         @db.Decimal(10, 2)
  sessionId       String?
  subtotal        Decimal          @default(0) @db.Decimal(10, 2)
  taxAmount       Decimal          @default(0) @db.Decimal(10, 2)
  restaurant      Restaurant       @relation(fields: [restaurantId], references: [id])
  customerSession CustomerSession? @relation(fields: [sessionId], references: [sessionId])
  table           Table            @relation(fields: [tableId], references: [id])
  orderItems      OrderItem[]
  payments        Payment[]

  @@index([restaurantId])
  @@index([tableId])
  @@index([status])
  @@index([createdAt])
  @@index([sessionId])
  @@index([paymentStatus])
  @@index([molliePaymentId])
  @@index([orderNumber])
  @@index([restaurantId, status])
  @@index([restaurantId, createdAt])
  @@index([tableId, createdAt])
  @@index([status, createdAt])
}

model OrderItem {
  id         String              @id @default(uuid())
  quantity   Int
  price      Decimal             @db.Decimal(10, 2)
  notes      String?
  status     OrderItemStatus     @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  orderId    String
  menuItemId String
  menuItem   MenuItem            @relation(fields: [menuItemId], references: [id])
  order      Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  modifiers  OrderItemModifier[]

  @@index([orderId])
  @@index([menuItemId])
  @@index([status])
  @@index([orderId, status])
  @@index([menuItemId, createdAt])
}

model OrderItemModifier {
  id              String     @id @default(uuid())
  price           Decimal    @db.Decimal(10, 2)

  orderItem       OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId     String

  modifierOption  ModifierOption @relation(fields: [modifierOptionId], references: [id])
  modifierOptionId String

  @@unique([orderItemId, modifierOptionId])
  // Performance indexes
  @@index([orderItemId])     // Modifiers for an order item
  @@index([modifierOptionId]) // Option usage tracking
}

model Staff {
  id                    String         @id @default(uuid())
  name                  String
  email                 String         @unique
  passwordHash          String
  role                  StaffRole
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  restaurantId          String?
  lastActiveAt          DateTime?
  lastLoginAt           DateTime?
  lockedUntil           DateTime?
  loginAttempts         Int            @default(0)
  maxConcurrentSessions Int            @default(3)
  restaurant            Restaurant?    @relation(fields: [restaurantId], references: [id])
  sessions              StaffSession[]

  @@index([email])
  @@index([restaurantId])
  @@index([isActive])
  @@index([role])
  @@index([restaurantId, role])
  @@index([lastLoginAt])
  @@index([lockedUntil])
}

model Payment {
  id            String        @id @default(uuid())
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
  @@index([transactionId])
  @@index([createdAt])
}

model CustomerSession {
  id            String   @id @default(uuid())
  sessionId     String   @unique
  tableId       String
  ipAddress     String?
  userAgent     String?
  customerName  String?
  customerEmail String?
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  lastActiveAt  DateTime @default(now())
  isActive      Boolean  @default(true)
  table         Table    @relation(fields: [tableId], references: [id])
  orders        Order[]

  @@index([sessionId])
  @@index([tableId])
  @@index([expiresAt])
  @@index([isActive])
  @@index([lastActiveAt])
  @@index([tableId, isActive])
  @@index([isActive, expiresAt])
}

model TableAssistance {
  id          String    @id @default(uuid())
  tableId     String
  type        String
  message     String?
  requestedAt DateTime  @default(now())
  resolvedAt  DateTime?
  resolvedBy  String?
  table       Table     @relation(fields: [tableId], references: [id])

  @@index([tableId])
  @@index([resolvedAt])
  @@index([type])
  @@index([requestedAt])
  @@index([tableId, resolvedAt])
  @@index([type, resolvedAt])
}

model AuditLog {
  id           String   @id @default(uuid())
  action       String
  entityType   String
  entityId     String?
  userId       String?
  restaurantId String?
  changes      Json?
  metadata     Json?
  ip           String?
  userAgent    String?
  severity     String   @default("info")
  success      Boolean  @default(true)
  timestamp    DateTime @default(now())

  @@index([action])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([restaurantId])
  @@index([timestamp])
  @@index([severity])
  @@index([restaurantId, timestamp])
  @@index([userId, timestamp])
  @@index([entityType, action, timestamp])
  @@index([action, success, timestamp])
  @@index([restaurantId, action])
}

model StaffSession {
  id               String    @id @default(uuid())
  sessionId        String    @unique
  staffId          String
  deviceInfo       String?
  userAgent        String?
  deviceName       String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  lastActiveAt     DateTime  @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?
  revokedBy        String?
  revokeReason     String?
  refreshTokenHash String?
  staff            Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId, isActive])
  @@index([sessionId])
  @@index([expiresAt])
  @@index([isActive, expiresAt])
  @@index([staffId, createdAt])
  @@index([lastActiveAt])
  @@index([revokedAt])
  @@map("staff_sessions")
}


enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum StaffRole {
  ADMIN
  MANAGER
  CHEF
  WAITER
  CASHIER
  SUPER_ADMIN
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  MOLLIE
}
