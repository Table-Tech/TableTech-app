// Full production-ready schema for TableTech

// ----------------------------
// Prisma Setup
// ----------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------
// Models
// ----------------------------

model Restaurant {
  id              String           @id @default(uuid())
  name            String
  address         String?
  phone           String?
  email           String?          @unique
  logoUrl         String?          // For restaurant branding
  currency        String           @default("EUR")  // ISO currency code
  taxRate         Decimal          @default(9.0) @db.Decimal(5,2)  // Dutch BTW 9%
  timezone        String           @default("Europe/Amsterdam")
  isActive        Boolean          @default(true)   // Soft delete for restaurants
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  tables          Table[]
  menuCategories  MenuCategory[]
  menuItems       MenuItem[]
  orders          Order[]
  staff           Staff[]

  // Performance indexes
  @@index([email])               // Email lookups
  @@index([isActive])            // Filter active restaurants
  @@index([createdAt])           // Restaurant registration tracking

  // For future: add restaurant-level settings
  // settings        Json?         // e.g., opening hours, currency, locale
}

model Table {
  id           String        @id @default(uuid())
  number       Int
  code         String        @unique     // Shown in QR codes (e.g., "T1")
  capacity     Int?
  status       TableStatus   @default(AVAILABLE)
  qrCodeUrl    String?       // Optional if you host the generated QR
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String

  orders       Order[]
  customerSessions CustomerSession[]
  assistance   TableAssistance[]

  // Performance indexes
  @@index([restaurantId])        // Tables by restaurant
  @@index([status])              // Filter by status
  @@index([restaurantId, status]) // Available tables per restaurant
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  imageUrl     String?
  description  String?
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  menuItems    MenuItem[]

  // Performance indexes
  @@index([restaurantId])                    // Categories by restaurant
  @@index([isActive])                        // Filter active categories
  @@index([displayOrder])                    // Category ordering
  @@index([restaurantId, isActive, displayOrder]) // Menu display queries
}

model MenuItem {
  id              String           @id @default(uuid())
  name            String
  description     String?
  price           Decimal          @db.Decimal(10, 2)
  imageUrl        String?
  isAvailable     Boolean          @default(true)
  preparationTime Int?             // Minutes estimate
  displayOrder    Int              @default(0)
  stockCount      Int?             // Track inventory
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // WebSocket availability features
  availabilityNote String?         // Reason for unavailability
  lastUnavailableAt DateTime?      // When marked unavailable
  unavailableBy   String?          // Staff member who changed availability

  category        MenuCategory     @relation(fields: [categoryId], references: [id])
  categoryId      String
  restaurant      Restaurant       @relation(fields: [restaurantId], references: [id])
  restaurantId    String

  orderItems      OrderItem[]
  modifierGroups  ModifierGroup[]

  // Performance indexes
  @@index([restaurantId])           // Menu items by restaurant
  @@index([categoryId])             // Items in category
  @@index([isAvailable])            // Filter available items
  @@index([restaurantId, isAvailable]) // Available items per restaurant
}

model ModifierGroup {
  id             String       @id @default(uuid())
  name           String
  required       Boolean      @default(false)
  multiSelect    Boolean      @default(false)
  minSelect      Int          @default(0)
  maxSelect      Int?
  displayOrder   Int          @default(0)
  isActive       Boolean      @default(true)   // Soft delete for modifier groups

  menuItem       MenuItem     @relation(fields: [menuItemId], references: [id])
  menuItemId     String

  modifiers      Modifier[]

  // Performance indexes
  @@index([menuItemId])      // Modifier groups for a menu item
  @@index([displayOrder])    // Ordering modifier groups
  @@index([isActive])        // Filter active modifier groups
  @@index([menuItemId, displayOrder]) // Menu item modifier display
  @@index([menuItemId, isActive]) // Active modifier groups for item
}

model Modifier {
  id              String        @id @default(uuid())
  name            String
  price           Decimal       @default(0) @db.Decimal(10, 2)
  displayOrder    Int           @default(0)
  isActive        Boolean       @default(true)   // Soft delete for modifiers

  modifierGroup   ModifierGroup @relation(fields: [modifierGroupId], references: [id])
  modifierGroupId String

  orderItemModifiers OrderItemModifier[]

  // Performance indexes
  @@index([modifierGroupId])         // Modifiers in a group
  @@index([displayOrder])            // Ordering modifiers
  @@index([isActive])                // Filter active modifiers
  @@index([modifierGroupId, displayOrder]) // Group modifier display
  @@index([modifierGroupId, isActive]) // Active modifiers in group
}

model Order {
  id              String        @id @default(uuid())
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  
  // CRITICAL: Financial breakdown (Dutch tax compliance)
  subtotal        Decimal       @default(0) @db.Decimal(10, 2)  // Before tax
  taxAmount       Decimal       @default(0) @db.Decimal(10, 2)  // BTW (9%)
  serviceFee      Decimal?      @db.Decimal(10, 2)  // Optional service charge
  totalAmount     Decimal       @db.Decimal(10, 2)  // Final amount
  
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paymentStatus   PaymentStatus @default(PENDING)
  molliePaymentId String?       // Track payment with Mollie
  webhookReceived Boolean       @default(false)
  
  // WebSocket/Real-time tracking fields
  confirmedAt     DateTime?     // When kitchen confirmed order
  confirmedBy     String?       // Staff member who confirmed
  readyAt         DateTime?     // When marked ready for pickup
  deliveredAt     DateTime?     // When delivered to customer
  completedAt     DateTime?     // When fully completed
  
  // Customer session tracking
  sessionId       String?       // Link to customer session
  customerSession CustomerSession? @relation(fields: [sessionId], references: [sessionId])

  table           Table         @relation(fields: [tableId], references: [id])
  tableId         String

  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId    String

  orderItems      OrderItem[]
  payments        Payment[]

  // Performance indexes
  @@index([restaurantId])        // Filter by restaurant
  @@index([tableId])             // Orders for specific table
  @@index([status])              // Kitchen queries by status
  @@index([createdAt])           // Order by time
  @@index([sessionId])           // Orders by customer session
  @@index([paymentStatus])       // Payment tracking
  @@index([molliePaymentId])     // Mollie webhook lookups
  @@index([orderNumber])         // Quick order lookups
  @@index([restaurantId, status]) // Combined restaurant + status queries
  @@index([restaurantId, createdAt]) // Restaurant order history
  @@index([tableId, createdAt])  // Table order history
  @@index([status, createdAt])   // Kitchen workflow by time
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id           String         @id @default(uuid())
  quantity     Int
  price        Decimal        @db.Decimal(10, 2)
  notes        String?
  status       OrderItemStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  order        Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String

  menuItem     MenuItem       @relation(fields: [menuItemId], references: [id])
  menuItemId   String

  modifiers    OrderItemModifier[]

  // Performance indexes
  @@index([orderId])             // Items in an order
  @@index([menuItemId])          // Track popular menu items
  @@index([status])              // Kitchen workflow queries
  @@index([orderId, status])     // Order preparation tracking
  @@index([menuItemId, createdAt]) // Menu item popularity over time
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

model OrderItemModifier {
  id              String     @id @default(uuid())
  price           Decimal    @db.Decimal(10, 2)

  orderItem       OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId     String

  modifier        Modifier   @relation(fields: [modifierId], references: [id])
  modifierId      String

  @@unique([orderItemId, modifierId])
  // Performance indexes
  @@index([orderItemId])     // Modifiers for an order item
  @@index([modifierId])      // Modifier usage tracking
}

model Staff {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  passwordHash String
  role         StaffRole
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Security & session tracking
  lastLoginAt  DateTime?  // Track login activity
  lastActiveAt DateTime?  // Track when last active
  loginAttempts Int       @default(0)  // Failed login tracking
  lockedUntil  DateTime?  // Account lockout
  
  // Session management
  sessions     StaffSession[] // Active login sessions
  maxConcurrentSessions Int @default(3) // Maximum allowed concurrent sessions

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     // Optional for SUPER_ADMIN

  // Performance indexes
  @@index([email])              // Login queries
  @@index([restaurantId])       // Staff by restaurant
  @@index([isActive])           // Filter active staff
  @@index([role])               // Staff by role
  @@index([restaurantId, role]) // Role-based queries per restaurant
  @@index([lastLoginAt])        // Recent activity tracking
  @@index([lockedUntil])        // Account lockout queries
}

enum StaffRole {
  SUPER_ADMIN // System-wide admin, can access all restaurants
  ADMIN       // Restaurant admin
  MANAGER     // Restaurant manager
  CHEF        // Kitchen staff
  WAITER      // Service staff
  CASHIER     // Payment handling
}

model Payment {
  id             String        @id @default(uuid())
  amount         Decimal       @db.Decimal(10, 2)
  method         PaymentMethod
  status         PaymentStatus @default(PENDING)
  transactionId  String?       // From Mollie or other gateway
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  order          Order         @relation(fields: [orderId], references: [id])
  orderId        String

  // Performance indexes
  @@index([orderId])         // Payments for order
  @@index([status])          // Filter by status
  @@index([transactionId])   // Mollie webhook lookups
  @@index([createdAt])       // Payment history
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  MOLLIE
}

model CustomerSession {
  id            String    @id @default(uuid())
  sessionId     String    @unique         // UUID for the session
  tableId       String                    // Which table they're at
  ipAddress     String?                   // For security tracking
  userAgent     String?                   // Browser/app info
  customerName  String?                   // Optional customer name
  customerEmail String?                   // Optional for receipts
  createdAt     DateTime  @default(now())
  expiresAt     DateTime                  // Auto-expire sessions
  lastActiveAt  DateTime  @default(now()) // Track activity
  isActive      Boolean   @default(true)  // Soft delete flag
  
  // Relations
  table         Table     @relation(fields: [tableId], references: [id])
  orders        Order[]   // Track all orders from this session
  
  // Indexes for performance
  @@index([sessionId])           // Session token lookups
  @@index([tableId])             // Sessions by table
  @@index([expiresAt])           // Session cleanup
  @@index([isActive])            // Active session filtering
  @@index([lastActiveAt])        // Activity-based cleanup
  @@index([tableId, isActive])   // Active sessions per table
  @@index([isActive, expiresAt]) // Expired session cleanup
}

model TableAssistance {
  id          String    @id @default(uuid())
  tableId     String
  type        String    // "waiter", "bill", "help"
  message     String?
  requestedAt DateTime  @default(now())
  resolvedAt  DateTime?
  resolvedBy  String?   // Staff member who resolved it
  
  table       Table     @relation(fields: [tableId], references: [id])
  
  @@index([tableId])             // Assistance requests by table
  @@index([resolvedAt])          // To find active requests (NULL = active)
  @@index([type])                // Filter by assistance type
  @@index([requestedAt])         // Order by request time
  @@index([tableId, resolvedAt]) // Active requests per table
  @@index([type, resolvedAt])    // Active requests by type
}

model AuditLog {
  id           String   @id @default(uuid())
  action       String   // ORDER_CREATED, PAYMENT_PROCESSED, STAFF_LOGIN, etc
  entityType   String   // Order, Payment, Staff, Menu, etc
  entityId     String?  // ID of the affected record
  userId       String?  // Who performed the action (staff member)
  restaurantId String?  // Which restaurant context
  changes      Json?    // { old: {...}, new: {...} } for data changes
  metadata     Json?    // Additional context data
  ip           String?  // IP address of action
  userAgent    String?  // Browser/client information
  severity     String   @default("info") // info, warning, critical
  success      Boolean  @default(true)   // Whether action succeeded
  timestamp    DateTime @default(now())
  
  // Performance indexes for audit queries
  @@index([action])                     // Query by action type
  @@index([entityType, entityId])       // Find all changes to specific entity
  @@index([userId])                     // User activity tracking
  @@index([restaurantId])               // Restaurant-specific audits
  @@index([timestamp])                  // Time-based queries
  @@index([severity])                   // Filter by importance
  
  // Composite indexes for common audit queries
  @@index([restaurantId, timestamp])    // Restaurant activity over time
  @@index([userId, timestamp])          // User activity timeline
  @@index([entityType, action, timestamp]) // Specific action types over time
  @@index([action, success, timestamp]) // Failed actions analysis
  @@index([restaurantId, action])       // Restaurant-specific action types
}

// ----------------------------
// Staff Session Management
// ----------------------------
model StaffSession {
  id            String    @id @default(uuid())
  sessionId     String    @unique // UUID for session tracking
  
  // Relations
  staffId       String   
  staff         Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  // Session metadata (NO IP tracking per your request)
  deviceInfo    String?   // "Chrome on Windows", "Mobile Safari" etc
  userAgent     String?   // Full user agent for device identification
  deviceName    String?   // Custom device name (e.g., "John's Laptop")
  
  // Session lifecycle
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  lastActiveAt  DateTime  @default(now())
  expiresAt     DateTime  // When this session expires (24h default)
  
  // Revocation tracking
  revokedAt     DateTime? // When session was revoked
  revokedBy     String?   // Staff ID who revoked it
  revokeReason  String?   // "terminated", "security_breach", "manual", "expired"
  
  // Security metadata
  refreshTokenHash String? // Store hashed refresh token for validation
  
  // Performance indexes
  @@index([staffId, isActive])     // Get active sessions for user
  @@index([sessionId])             // Fast session lookups
  @@index([expiresAt])             // Cleanup expired sessions
  @@index([isActive, expiresAt])   // Find expired active sessions to cleanup
  @@index([staffId, createdAt])    // User session history
  @@index([lastActiveAt])          // Activity tracking
  @@index([revokedAt])             // Revoked session queries
  
  @@map("staff_sessions")
}
